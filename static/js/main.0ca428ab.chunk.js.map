{"version":3,"sources":["getWeb3.js","components/tabsMenu/TabsMenu.js","components/profile/Profile.js","App.js","serviceWorker.js","index.js","components/home/Home.js","components/verify/Verify.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","TabsMenu","homeRef","verifyRef","profileRef","useState","tab","setTab","scroll","reference","current","scrollIntoView","behavior","className","onClick","Profile","fileListChanged","JSON","parse","localStorage","getItem","fileList","setFileList","useEffect","id","ref","map","hash","index","key","App","useRef","setFileListChanged","rel","href","Home","Verify","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","setState","contract","instantiateContract","alert","error","require","simpleStorage","setProvider","state","currentProvider","account","deployed","simpleStorageInstance","methods","get","call","ipfsHash","fileUpload","ipfsClient","ipfs","add","buffer","fileCreated","set","path","send","from","response","fileHashList","setItem","stringify","push","copyToClickboard","clipboard","writeText","onFileDrop","bind","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","result","create","this","type","value","onChange","htmlFor","name","Component","Hash","of","hashOfFile","isVerified","isNeutral","undefined","style","color"],"mappings":"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","file":"static/js/main.0ca428ab.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState} from \"react\";\r\nimport \"./tabsMenu.css\";\r\n\r\nconst TabsMenu = ({homeRef, verifyRef, profileRef}) => {\r\n\r\n    const [tab, setTab] = useState('home');\r\n\r\n    const scroll = (reference) => {\r\n        reference.current.scrollIntoView({ behavior: 'smooth' });\r\n        // console.log(reference.current.className)\r\n        setTab(reference.current.className);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tab_menu\">\r\n            <div className=\"tab_box\">\r\n                <ul>\r\n                    <li className={ tab === 'home' ? 'tabs active' : 'tabs'} onClick={()=>scroll(homeRef)}>Home</li>\r\n                    <li className={ tab === 'verify' ? 'tabs active' : 'tabs'} onClick={()=>scroll(verifyRef)}>Verify</li>\r\n                    <li className={ tab === 'profile' ? 'tabs active' : 'tabs'} onClick={()=>scroll(profileRef)}>Profile</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabsMenu;","import React, {useState, useEffect} from \"react\";\r\nimport \"./profile.css\";\r\n\r\nconst Profile = ({reference, fileListChanged}) => {\r\n\r\n    const [fileList, setFileList] = useState([...JSON.parse(localStorage.getItem(\"fileHashList\"))]);\r\n\r\n    useEffect(()=>{\r\n        setFileList([...JSON.parse(localStorage.getItem(\"fileHashList\"))]);\r\n    }, [fileListChanged]);\r\n    return(\r\n        <div className=\"profile\" id=\"profile\" ref={reference}>\r\n            <h1>My Profile</h1>\r\n            <div className=\"profile_details\">\r\n                <span className=\"files\">\r\n                    <h2>Submitted Files</h2>\r\n                    <ul>\r\n                        {\r\n                            fileList.map((hash, index) => {\r\n                                return(\r\n                                    <li key={index}>\r\n                                        {hash}\r\n                                    </li>\r\n                                );\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {useRef, useState} from 'react';\nimport Home from './components/home/Home';\nimport Verify from './components/verify/Verify';\nimport TabsMenu from './components/tabsMenu/TabsMenu';\nimport Profile from './components/profile/Profile';\n\nimport './App.css';\n\nconst App = () => {\n  const homeRef = useRef();\n  const verifyRef = useRef();\n  const profileRef = useRef();\n\n  const [fileListChanged, setFileListChanged] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.4.1/css/all.css\"/>\n        <TabsMenu homeRef={homeRef} profileRef={profileRef} verifyRef={verifyRef}/>\n        <Home reference={homeRef} fileListChanged={fileListChanged} setFileListChanged={setFileListChanged} />\n        <Verify reference={verifyRef} />\n        <Profile reference={profileRef} fileListChanged={fileListChanged} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\r\nimport SimpleStorageContract from \"../../contracts/SimpleStorage.json\";\r\nimport getWeb3 from \"../../getWeb3\";\r\nimport {create} from 'ipfs-http-client';\r\n\r\nimport \"./home.css\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { buffer: null, ipfsHash: '', web3: null, accounts: null, contract: null};\r\n    this.onFileDrop = this.onFileDrop.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        SimpleStorageContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      this.setState({ web3, accounts, contract: instance }, this.instantiateContract);\r\n  } catch (error) {\r\n    alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\r\n    console.error(error);\r\n  }\r\n};\r\n\r\ninstantiateContract = async () => {\r\n  const contract = require(\"@truffle/contract\");\r\n  const simpleStorage = contract(SimpleStorageContract)\r\n  simpleStorage.setProvider(this.state.web3.currentProvider)\r\n\r\n  this.state.web3.eth.getAccounts((error, account) => {\r\n    simpleStorage.deployed().then((instance) => {\r\n      this.simpleStorageInstance = instance\r\n      this.setState({ accounts: account[0] })\r\n      // Get the value from the contract to prove it worked.\r\n      return this.state.contract.methods.get.call(account[0])\r\n    }).then((ipfsHash) => {\r\n      // Update state with the result.\r\n      return this.setState({ ipfsHash })\r\n    })\r\n  })\r\n};\r\n\r\nonFileDrop(event) {\r\n  event.preventDefault()\r\n  const file = event.target.files[0]\r\n  const reader = new window.FileReader()\r\n  reader.readAsArrayBuffer(file)\r\n  reader.onloadend = () => {\r\n    this.setState({ buffer: Buffer(reader.result) }, this.fileUpload)\r\n    console.log('buffer', this.state.buffer)\r\n  }\r\n}\r\n\r\nasync ipfsClient() {\r\n  const ipfs = create('https://ipfs.infura.io:5001/api/v0');\r\n  return ipfs;\r\n}\r\n\r\nfileUpload = async () => {\r\n  const ipfs = await this.ipfsClient();\r\n  const fileCreated = await ipfs.add(this.state.buffer);\r\n  this.state.contract.methods.set(fileCreated.path).send({from : this.state.accounts})\r\n  const response = await this.state.contract.methods.get().call();\r\n\r\n  if(response){\r\n    let fileHashList = JSON.parse(localStorage.getItem(\"fileHashList\"));\r\n    if(fileHashList === null) fileHashList = [];\r\n    localStorage.setItem(\"hash\", JSON.stringify(response));\r\n    fileHashList.push(response);\r\n    localStorage.setItem(\"fileHashList\", JSON.stringify(fileHashList));\r\n  }\r\n  this.props.setFileListChanged(!this.props.fileListChanged);\r\n\r\n  this.setState({ipfsHash: fileCreated.path});\r\n}\r\n\r\ncopyToClickboard = () => {\r\n  navigator.clipboard.writeText(this.state.ipfsHash);\r\n}\r\n\r\nrender() {\r\n  if (!this.state.web3) {\r\n    return <div>Loading Web3, accounts, and contract...</div>;\r\n  }\r\n  return (\r\n      <div className=\"home\" id=\"home\" ref={this.props.reference}>\r\n      <h1>Certify your Documents</h1>\r\n      <div className=\"home_container\">\r\n          <h3>Drag and drop your files in below box to generate hash code.</h3>\r\n          <div className=\"drop_box\">\r\n              <div className=\"drop_zone\" >\r\n                  <i className=\"fa-solid fa-cloud-arrow-up\"></i>\r\n                  <input type=\"file\" value=\"\" onChange={this.onFileDrop}/>\r\n                  <span>Drag and Drop your files</span>\r\n              </div>\r\n              <span>OR</span>\r\n              <div className=\"select_file\">       \r\n                  <label htmlFor=\"file\">Select file</label>                   \r\n                  <input type=\"file\" name=\"files[]\" id=\"file\" />\r\n              </div>\r\n          </div>\r\n          <div className=\"hash_section\">\r\n              <h3>Below is the generated hash code of your file.</h3>\r\n              <div className=\"hash_box\">\r\n                  <span>Hash code :</span>\r\n                  {\r\n                    typeof this.state.ipfsHash === \"string\" ? <h3>{this.state.ipfsHash}</h3> : <h3>-</h3>\r\n                  }\r\n                  <button className=\"copy_button\" onClick={this.copyToClickboard}><i className=\"fa-solid fa-copy\"></i></button>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default Home;","import React, { Component } from \"react\";\r\nimport SimpleStorageContract from \"../../contracts/SimpleStorage.json\";\r\nimport getWeb3 from \"../../getWeb3\";\r\nimport {create} from 'ipfs-http-client';\r\nimport Hash from 'ipfs-only-hash';\r\n\r\nimport \"./verify.css\";\r\n\r\nclass Verify extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { buffer: null, ipfsHash: '', web3: null, accounts: null, contract: null, isVerified: false , isNeutral: true};\r\n    this.onFileDrop = this.onFileDrop.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        SimpleStorageContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      this.setState({ web3, accounts, contract: instance }, this.instantiateContract);\r\n  } catch (error) {\r\n    alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\r\n    console.error(error);\r\n  }\r\n};\r\n\r\ninstantiateContract = async () => {\r\n  const contract = require(\"@truffle/contract\");\r\n  const simpleStorage = contract(SimpleStorageContract)\r\n  simpleStorage.setProvider(this.state.web3.currentProvider)\r\n\r\n  this.state.web3.eth.getAccounts((error, account) => {\r\n    simpleStorage.deployed().then((instance) => {\r\n      this.simpleStorageInstance = instance\r\n      this.setState({ accounts: account[0] })\r\n      // Get the value from the contract to prove it worked.\r\n      return this.state.contract.methods.get.call(account[0])\r\n    })\r\n  })\r\n};\r\n\r\nonFileDrop(event) {\r\n  event.preventDefault()\r\n  const file = event.target.files[0]\r\n  const reader = new window.FileReader()\r\n  reader.readAsArrayBuffer(file)\r\n  reader.onloadend = () => {\r\n    this.setState({ buffer: Buffer(reader.result) }, this.fileUpload)\r\n    console.log('buffer', this.state.buffer)\r\n  }\r\n}\r\n\r\nasync ipfsClient() {\r\n  const ipfs = create('https://ipfs.infura.io:5001/api/v0');\r\n  return ipfs;\r\n}\r\n\r\nfileUpload = async () => {\r\n//   const ipfs = await this.ipfsClient();\r\n  const hashOfFile = await Hash.of(this.state.buffer);\r\n\r\n  const response = await this.state.contract.methods.get().call();\r\n\r\n  this.setState({ipfsHash: hashOfFile});\r\n\r\n  if (response  === hashOfFile){\r\n    this.setState({isVerified: true, isNeutral: false});\r\n  }\r\n  else{\r\n    this.setState({isVerified: false, isNeutral: false});\r\n  }\r\n}\r\n\r\ncopyToClickboard = () => {\r\n  navigator.clipboard.writeText(this.state.ipfsHash);\r\n}\r\n\r\nrender() {\r\n  if (!this.state.web3) {\r\n    return <div>Loading Web3, accounts, and contract...</div>;\r\n  }\r\n  return (\r\n    <div className=\"verify\" id=\"verify\" ref={this.props.reference}>\r\n    <h1>Verify your Documents</h1>\r\n    <div className=\"verify_container\">\r\n        <h3>Drag and drop your files in below box to verify if the document is already notarized.</h3>\r\n        <div className=\"verify_drop_box\">\r\n            <div className=\"verify_drop_zone\" >\r\n                <i className=\"fa-solid fa-cloud-arrow-up\"></i>\r\n                <input type=\"file\" value=\"\" onChange={this.onFileDrop}/>\r\n                <span>Drag and Drop your files</span>\r\n            </div>\r\n            <span>OR</span>\r\n            <div className=\"verify_select_file\">       \r\n                <label htmlFor=\"file\">Select file</label>                   \r\n                <input type=\"file\" name=\"files[]\" id=\"file\" />\r\n            </div>\r\n        </div>\r\n        <div className=\"verify_hash_section\">\r\n            {\r\n                this.state.isNeutral ? undefined \r\n                : \r\n                this.state.isVerified ? <h3 style={{ color : 'green' }}>Hurray! The file is already notarized. Below are the details,</h3>\r\n                :\r\n                <h3 style={{ color : 'red' }}>Sorry! The file is not notarized, notarize first and then try.</h3>\r\n            }\r\n            <div className={\r\n                this.state.isNeutral ? \"verify_hash_box\" : this.state.isVerified  ? 'verified verify_hash_box' : 'unverified verify_hash_box'\r\n                }>\r\n                <span>Hash code :</span>\r\n                <h3>{this.state.ipfsHash}</h3>\r\n                <button className=\"verify_copy_button\" onClick={this.copyToClickboard}><i className=\"fa-solid fa-copy\"></i></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default Verify;"],"sourceRoot":""}